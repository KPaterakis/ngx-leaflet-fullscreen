{"version":3,"sources":["../../../node_modules/@runette/leaflet-fullscreen/dist/Leaflet.fullscreen.js","ng://@runette/ngx-leaflet-fullscreen/lib/ngx-leaflet-fullscreen.component.ts","ng://@runette/ngx-leaflet-fullscreen/lib/ngx-leaflet-fullscreen.module.ts"],"names":["factory","L","Control","Fullscreen","extend","options","position","title","false","true","onAdd","map","container","DomUtil","create","this","link","href","_map","on","_toggleTitle","DomEvent","_click","onRemove","off","e","stopPropagation","preventDefault","toggleFullscreen","isFullscreen","Map","include","_isFullscreen","getContainer","pseudoFullscreen","_disablePseudoFullscreen","document","exitFullscreen","mozCancelFullScreen","webkitCancelFullScreen","msExitFullscreen","_enablePseudoFullscreen","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","Element","ALLOW_KEYBOARD_INPUT","msRequestFullscreen","addClass","_setFullscreen","fire","removeClass","fullscreen","invalidateSize","_onFullscreenChange","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","msFullscreenElement","mergeOptions","fullscreenControl","addInitHook","fullscreenchange","addControl","onFullscreenChange","bind","whenReady","control","module","exports","require$$0","FullscreenControlComponent","prototype","ngOnInit","ngOnDestroy","removeControl","Object","defineProperty","addTo","Component","args","selector","template","Input","NgxLeafletFullscreenModule","NgModule","declarations","imports"],"mappings":"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","sourcesContent":["(function (factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD\n        define(['leaflet'], factory);\n    } else if (typeof module !== 'undefined') {\n        // Node/CommonJS\n        module.exports = factory(require('leaflet'));\n    } else {\n        // Browser globals\n        if (typeof window.L === 'undefined') {\n            throw new Error('Leaflet must be loaded first');\n        }\n        factory(window.L);\n    }\n}(function (L) {\n    L.Control.Fullscreen = L.Control.extend({\n        options: {\n            position: 'topleft',\n            title: {\n                'false': 'View Fullscreen',\n                'true': 'Exit Fullscreen'\n            }\n        },\n\n        onAdd: function (map) {\n            var container = L.DomUtil.create('div', 'leaflet-control-fullscreen leaflet-bar leaflet-control');\n\n            this.link = L.DomUtil.create('a', 'leaflet-control-fullscreen-button leaflet-bar-part', container);\n            this.link.href = '#';\n\n            this._map = map;\n            this._map.on('fullscreenchange', this._toggleTitle, this);\n            this._toggleTitle();\n\n            L.DomEvent.on(this.link, 'click', this._click, this);\n\n            return container;\n        },\n\n        onRemove: function (map) {\n            map.off('fullscreenchange', this._toggleTitle, this);\n        },\n\n        _click: function (e) {\n            L.DomEvent.stopPropagation(e);\n            L.DomEvent.preventDefault(e);\n            this._map.toggleFullscreen(this.options);\n        },\n\n        _toggleTitle: function() {\n            this.link.title = this.options.title[this._map.isFullscreen()];\n        }\n    });\n\n    L.Map.include({\n        isFullscreen: function () {\n            return this._isFullscreen || false;\n        },\n\n        toggleFullscreen: function (options) {\n            var container = this.getContainer();\n            if (this.isFullscreen()) {\n                if (options && options.pseudoFullscreen) {\n                    this._disablePseudoFullscreen(container);\n                } else if (document.exitFullscreen) {\n                    document.exitFullscreen();\n                } else if (document.mozCancelFullScreen) {\n                    document.mozCancelFullScreen();\n                } else if (document.webkitCancelFullScreen) {\n                    document.webkitCancelFullScreen();\n                } else if (document.msExitFullscreen) {\n                    document.msExitFullscreen();\n                } else {\n                    this._disablePseudoFullscreen(container);\n                }\n            } else {\n                if (options && options.pseudoFullscreen) {\n                    this._enablePseudoFullscreen(container);\n                } else if (container.requestFullscreen) {\n                    container.requestFullscreen();\n                } else if (container.mozRequestFullScreen) {\n                    container.mozRequestFullScreen();\n                } else if (container.webkitRequestFullscreen) {\n                    container.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);\n                } else if (container.msRequestFullscreen) {\n                    container.msRequestFullscreen();\n                } else {\n                    this._enablePseudoFullscreen(container);\n                }\n            }\n\n        },\n\n        _enablePseudoFullscreen: function (container) {\n            L.DomUtil.addClass(container, 'leaflet-pseudo-fullscreen');\n            this._setFullscreen(true);\n            this.fire('fullscreenchange');\n        },\n\n        _disablePseudoFullscreen: function (container) {\n            L.DomUtil.removeClass(container, 'leaflet-pseudo-fullscreen');\n            this._setFullscreen(false);\n            this.fire('fullscreenchange');\n        },\n\n        _setFullscreen: function(fullscreen) {\n            this._isFullscreen = fullscreen;\n            var container = this.getContainer();\n            if (fullscreen) {\n                L.DomUtil.addClass(container, 'leaflet-fullscreen-on');\n            } else {\n                L.DomUtil.removeClass(container, 'leaflet-fullscreen-on');\n            }\n            this.invalidateSize();\n        },\n\n        _onFullscreenChange: function (e) {\n            var fullscreenElement =\n                document.fullscreenElement ||\n                document.mozFullScreenElement ||\n                document.webkitFullscreenElement ||\n                document.msFullscreenElement;\n\n            if (fullscreenElement === this.getContainer() && !this._isFullscreen) {\n                this._setFullscreen(true);\n                this.fire('fullscreenchange');\n            } else if (fullscreenElement !== this.getContainer() && this._isFullscreen) {\n                this._setFullscreen(false);\n                this.fire('fullscreenchange');\n            }\n        }\n    });\n\n    L.Map.mergeOptions({\n        fullscreenControl: false\n    });\n\n    L.Map.addInitHook(function () {\n        if (this.options.fullscreenControl) {\n            this.fullscreenControl = new L.Control.Fullscreen(this.options.fullscreenControl);\n            this.addControl(this.fullscreenControl);\n        }\n\n        var fullscreenchange;\n\n        if ('onfullscreenchange' in document) {\n            fullscreenchange = 'fullscreenchange';\n        } else if ('onmozfullscreenchange' in document) {\n            fullscreenchange = 'mozfullscreenchange';\n        } else if ('onwebkitfullscreenchange' in document) {\n            fullscreenchange = 'webkitfullscreenchange';\n        } else if ('onmsfullscreenchange' in document) {\n            fullscreenchange = 'MSFullscreenChange';\n        }\n\n        if (fullscreenchange) {\n            var onFullscreenChange = L.bind(this._onFullscreenChange, this);\n\n            this.whenReady(function () {\n                L.DomEvent.on(document, fullscreenchange, onFullscreenChange);\n            });\n\n            this.on('unload', function () {\n                L.DomEvent.off(document, fullscreenchange, onFullscreenChange);\n            });\n        }\n    });\n\n    L.control.fullscreen = function (options) {\n        return new L.Control.Fullscreen(options);\n    };\n}));\n","\n/// <reference types='@runette/leaflet-fullscreen'/>\nimport { Component, OnInit, OnDestroy, Input } from '@angular/core';\nimport {Map, control, Control, FullscreenOptions} from 'leaflet';\nimport '../../../../node_modules/@runette/leaflet-fullscreen/dist/Leaflet.fullscreen.js';\n\n@Component({\n  selector: 'leaflet-fullscreen-control',\n  template: '',\n  styleUrls: []\n})\nexport class FullscreenControlComponent implements OnInit, OnDestroy {\n  private _map: Map;\n  public control: Control.Fullscreen;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  ngOnDestroy() {\n    this._map.removeControl(this.control);\n    this._map.off('enterFullscreen');\n    this._map.off('exitFullscreen')\n  }\n\n  @Input() options: FullscreenOptions = {};\n\n  @Input() set map(map: Map){\n    if (map) { \n      this._map = map;\n      this.control = control.fullscreen(this.options)\n      this.control.addTo(map);\n      map.on('enterFullscreen', () => map.invalidateSize());\n      map.on('exitFullscreen', () => map.invalidateSize());\n    };\n  };\n  get map(): Map {\n    return this._map\n  };\n};\n","import { NgModule } from '@angular/core';\nimport { FullscreenControlComponent } from './ngx-leaflet-fullscreen.component';\n\n@NgModule({\n  declarations: [FullscreenControlComponent],\n  imports: [\n  ],\n  exports: [FullscreenControlComponent]\n})\nexport class NgxLeafletFullscreenModule { }\n"]}